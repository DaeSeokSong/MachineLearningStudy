[배열 타입으로 할 수 있는 더 많은 일]
opencv 내의 여러 함수들이 있는데 이 들으 몇 가지 일반 규칙을 따른다.
1. saturation = 계산된 결과를 출력 배열의 타입으로 포화 캐스트한다.
2. output = 타입이나 크기가 필요한 바와 일치하지 않으면 결과 배열을 cv::Mat::create() 함수로 생성한다. 대개 필요한 출력 타입과 크기는 입력 배열과 같지만, 일부 함수는 배열 크기(Ex. cv::transpose())나 배열 타입(Ex. cv::split())이 다를 수 있다.
3. scalar = cv::add()와 같은 많은 함수는 두 배열 또는 배열과 스칼라를 더하는 것을 허용한다. 함수 원형에 제공한 파라미터 scalar는 모든 요소가 동일한 스칼라 값을 가진 배열처럼 취급한다.
4. mask = 함수에 mask 파라미터가 있을 때마다 마스크 값이 0이 아닌 요소에 대해서만 연산을 수행한다.
5. dtype = 많은 산술 함수에서 입력 타입은 같은 필요가 없고, 입력 타입이 같더라도 출력 타입은 입력 타입과 다를 수 있다. 이 경우 파라미터 dtype으로 출력 배열의 깊이 타입을 명시적으로 지정할 수 있다. 파라미터 dtype이 존재하면 특정 기본 타입(Ex. CV_32F)을 설정할 수 있으며, 연산 결과의 배열 타입은 설정한 타입이 된다. dtype을 -1(기본값)로 설정하면 결과 타입은 입력 타입과 같게 된다.
6. 인플레이스(in-place) 연산 = 달리 지정하지 않는 한 크기와 타입이같은 배열은 입력 배열과 출력 배열 파라미터로 동시에 사용될 수 있다.
7. multichannel = 다중 채널을 이용하는 것이 어색한 연산에 파라미터 multichannel이 주어지면 각 채널을 개별 채널로 취급한다.

[cv::abs()]
cv::MatExpr cv::abs(cv::InputArray src);
cv::MatExpr cv::abs(const cv::MatExpr& src); // 행렬 표현식

이 함수는 배열 또는 배열 표현식의 절대값을 계산한다. 흔히 배열의 모든 요소의 절댓값을 계산할 때 사용한다.
실제 cv::abs() 함수 호출은 cv::absdiff()나 다른 함수로 변환해 처리한다.
- m2 = cv::abs(m0 - m1); → cv::absdiff(m0, m1, m2)로 변환하여 실행한다.
- m2 = cv::abs(m0) → m2 = cv::absdiff(m0, cv::Scalar::all(0), m2)로 변한하여 실행한다.
- m2 = cv::Mat_<Vec<uchar, n>>(cv::abs(alpha*m0 + beta)) → cv::convertScaleAbs(m0, m2, alpha, beta)로 변한하여 실행한다.

[cv::absdiff()]
void cv::absdiff (
	cv::InputArray	src1,	// 첫 번째 입력 배열
	cv::InputArray	src2,	// 두 번째 입력 배열
	cv::OutputArray	dst		// 결과 배열
)

주어진 두 배열에 대해 두 배열의 요소 간 차이의 절대값을 계산하여 배열 dst의 대응하는 요소에 저장한다.

[cv::add()]
void cv::add(
	cv::InputArray	src1,					// 첫 번째 입력 배열
	cv::InputArray	src2,					// 두 번째 입력 배열
	cv::OutputArray	dst,					// 결과 배열
	cv::InputArray	mask	= cv::noArray()	// 0이 아닌 위치만 연산한다.
	int 			dtype 	= -1			// dst의 타입 지정
)

단순한 덧셈 함수다. 두 배열의 요소를 서로 더한 결과르 배열 dst에 대응하는 요소에 저장한다.
간단한 행렬 연산(dst = src1 + src2 또는 dst += src1)으로도 같은 결과를 얻을 수 있다.

[cv::addWeighted()]
void cv::addWeighted(
	cv::InputArray	src1,		// 첫 번째 입력 배열
	double			alpha,		// src1의 가중치
	cv::InputArray	src2,		// 두 번째 입력 배열
	double			beta,		// src2의 가중치
	double			gamma,		// offset 값
	cv::OutputArray	dst,		// 결과 배열
	int 			dtype = -1	// dst의 타입 지정
)

dst에 기록하는 결과값이 dst = src1*alpha + src2*beta + gamma 에 따라 계산된다는 점을 제외하면 cv::add() 함수와 유사하다.
두 소스 이미지는 같은 타입이기만 하면 어떤 픽셀 타입이든 가능하다. 즉 그레이스케일, 컬러 등 어떤 채널이든 가능하다.
이 함수는 알파 블렌딩(alpha blending) 구현에 사용할 수 있다. 즉, 서로 다른 이미지를 혼합하는 데 사용할 수 있다.
이 경우파라미터 alpha는 src1의 블렌딩 강도(투명도)를, beta는 src2의 블렌딩 강도를 의미한다.
alpha는 0과 1 사이의 값으로 설정하고, beta는 1-alpha로, gamma는 0으로 설정해 표준 알파 블렌딩 방정식(dst = src1*alpha + src2*(1-alpha))에 사용할 수 있다.

[cv::bitwise_and()]
void cv::bitwise_and(
	cv::InputArray	src1,					// 첫 번째 입력 배열
	cv::InputArray	src2,					// 두 번째 입력 배열
	cv::OutputArray	dst,					// 결과 배열
	cv::InputArray	mask = cv::noArray()	// 0이 아닌 위치만 연산한다.
)

두 배열의 요소 간 비트 단위 논리곱 연산을 수행한다. AND 연산의 결과를 dst의 대응 요소에 저장한다.

[cv::bitwise_not()]
void cv::bitwise_and(
	cv::InputArray	src, 					// 입력 배열
	cv::OutputArray	dst,					// 결과 배열
	cv::InputArray	mask = cv::noArray()	// 0이 아닌 위치만 연산한다.
)

요소 단위로 비트 단위 반전 연산을 수행한다. 배열의 요소에 NOT 연산의 결과를 dst의 대응 요소에 저장한다.

[cv::bitwise_or()]
void cv::bitwise_or(
	cv::InputArray	src1,					// 첫 번째 입력 배열
	cv::InputArray	src2,					// 두 번째 입력 배열
	cv::OutputArray	dst,					// 결과 배열
	cv::InputArray	mask = cv::noArray()	// 0이 아닌 위치만 연산한다.
)

두 배열의 요소 간 비트 단위 논리합 연산을 수행한다. OR 연산의 결과를 dst의 대응 요소에 저장한다.

[cv::bitwise_xor()]
void cv::bitwise_xor(
	cv::InputArray	src1,					// 첫 번째 입력 배열
	cv::InputArray	src2,					// 두 번째 입력 배열
	cv::OutputArray	dst,					// 결과 배열
	cv::InputArray	mask = cv::noArray()	// 0이 아닌 위치만 연산한다.
)

두 배열 요소 간 비트 단위 XOR 연산을 수행한다. XOR 연산의 결과를 dst의 대응 요소에 저장한다.

[cv::calcCovarMatrix()]
void cv::calcCovarMatrix(
	const cv::Mat*	samples,		// 행렬 n*1 또는 1*n의 C 배열 타입
	int 			nsamples,		// samples가 가리키는 행렬의 수 n
	cv::Mat&		covar,			// 공분산을 반환하기 위해 참조하는 배열
	cv::Mat&		mean,			// 평균을 반환하기 위해 참조하는 배열
	int 			flags,			// 특별한 변형을 위한 매개변수
	int 			ctype = cv::F64	// covar의 타입 지정
)

void cv::calcCovarMatrix(
	cv::InputArray	samples,		// 행렬 n*1 또는 1*n의 C 배열 타입
	cv::Mat&		covar,			// 공분산을 반환하기 위해 참조하는 배열
	cv::Mat&		mean,			// 평균을 반환하기 위해 참조하는 배열
	int 			flags,			// 특별한 변형을 위한 매개변수
	int 			ctype = cv::F64	// covar의 타입 지정
)

임의의 수의 벡터가 주어지면 해당 점들의 분포에 대한 가우스 근사법으로 평균과 공분산 행렬을 계산한다. 가우스 근사법은 다양한 방법으로 사용할 수 있는데, OpenCV는 파라미터 flags로 지정하도록 했다. OR 연산자(|)로 조합할 수 있다.

flags 종류
- cv::COVAR_NORMAL		평균과 공분산을 계산한다.
- cv::COVAR_SCRAMBLED	빠른 PCA 스크램블링 공분산을 계산한다.
- cv::COVAR_USE_AVERAGE	입력된 파라미터 mean을 평균 대신 사용한다. → 계산 시간 단축
- cv::COVAR_SCALE 		출력 공분산 행렬의 크기를 재조정한다. → 균일하게 스케일하기 위해
- cv::COVAR_ROWS 		입력 벡터로 samples의 행을 사용한다.
- cv::COVAR_COLS		입력 벡터로 samples의 열을 사용한다.

다중 정의된 함수 중 첫 번째 함수는 cv::Mat 객체 배열에 대한 포인터를 배열의 개수를 나타내는 파라미터 nsamples와 함께 전달한다. 이 경우, 배열은 n*1 또는 1*n 배열이 된다.
두 번째 함수는 단일 n*m 배열을 전달한다. 이 경우, m 길이의 n행 벡터를 나타내기 위해 cv::COVAR_ROWS 플래그를 전달하거나 n 길이의 m열 벡터를 나타내기 위해 cv::COVAR_COLS 플래그를 전달한다.

모든 경우에 공분산 결과는 배열 covar에 저장되지만, 배열 mean의 정확한 의미는 flags 값에 따라 다르다. cv::COVAR_NORMAL과 cv::COVAR_SCRAMBLED 플래그는 상호 배타적이다. 즉, 두 플래그를 함께 사용할 수없다. cv::COVAR_SCRAMBLED 플래그를 지정하면 같은 길이의 n의 m개 벡터로 계산하지만, 결과적으로 스크램블된 공분산 행렬은 m*m 행렬이다. 행렬이 매우 큰 벡터인 경우, 빠른 PCA(Ex. 얼굴인식을 위한 고유얼굴 기술)와 같은 특정 알고리즘을 사용한다.

cv::calcCovarMatrix() 함수에 대한 입출력 배열은 모두 같은 부동 소수점 타입이어야 한다. 결과 행렬 covar의 크기는 표준 또는 스크램블된 공분산을 계산하는지 아닌지에 따라 n*n 또는 m*m 행렬이 된다. cv::Mat* 형식으로 사용할 때, samples의 벡터 입력을 사실상 1차원이 될 수없다.

[cv::cartToPolar()]
void cv::cartToPolar() (
	cv::InputArray	x,
	cv::InputArray	y,
	cv::OutputArray	magnitude,
	cv::OutputArray	angle,
	bool			angleInDegrees = false
)

두 입력 배열 x와 y를 벡터 필드의 x와 y 성분으로 사용한다. 배열 x와 y는 같은 크기를 가져야 한다. 그러면 cv::cartToPolar() 함수가 벡터 필드에서 극좌표를 계산한다. 각 벡터의 길이는 배열 magnitude의 대응 위치에 저장하고 각 벡터의 각은 배열 angle의 대응 위치에 저장한다. angleInDegrees가 false면 라디안 단위로 저장, true면 도(degree)단위로 저장한다.

[cv::checkRange()]
bool cv::checkRange(
	cv::InputArray	src,
	bool			quiet	= true,
	cv::Point*		pos 	= 0,		// NULL이 아니면 범위에서 벗어난 첫 번째 위치 저장
	double			minVal	= -DBL_MAX,	// 체크할 아래 경계(포함)
	double			maxVal	= DBL_MAX	// 체크할 위 경계(제외)
)

입력 배열의 모든 요소를 검사하고 요소 값이 주어진 범위에 있는지 결정한다. 범위 파라미터 외에도 NaN 또는 inf 값도 범위에서 벗어나는 것으로 취급한다. quiet가 false면 범위 벗어난 값 발견시 예외를 던진다. cv::checkRange() 함수는 모든 값이 범위 내에 있으면 true 반환하고, 범위 벗어난 값이 있으면 false를 반환한다.

[cv::compare()]
bool cv::compare(
	cv::InputArray	src1,	// 첫 번째 입력 배열
	cv::InputArray	src2,	// 두 번째 입력 배열
	cv::OutputArray	dst,	// 결과 배열
	int 			cmpop	// 비교 연산자, 하단 참조
)

두 배열의 대응하는 요소 간 비교 연산 결과를 dst의 대응 요소에 저장한다.
각 경우에 일치하는 픽셀은 255로 일치하지 않는 픽셀은 0으로 해서 dst에 결과를 8비트 타입으로 저장한다.

cmpop 종류		비교 연산 			같은 결과를 얻는 행렬 연산
- cv::CMP_EQ	src1i  == src2i		dst = src1 == src2;
- cv::CMP_GT	src1i > src2i		dst = src1 > src2;
- cv::CMP_GE	src1i >= src2i		dst = src1 >= src2;
- cv::CMP_LT	src1i < src2i		dst = src1 < src2;
- cv::CMP_LE	src1i <= src2i		dst = src1 <= src2;
- cv::CMP_NE	src1i != src2i		dst = src1 != src2;

[cv::completeSymm()]
bool cv::completeSymm(
	cv::InputArray	mtx,
	bool			lowerToUpper = false
)

주어진 행렬 mtx(2차원 배열)을 복사해 대칭화한다.
대각선 요소를 기준으로 아래쪽 삼각현의 모든 요소를 행렬 위쪽 삼각형의 전치 위치에 복사한다. 대각선 요소는 변경되지 않는다. 파라미터 lowerToUpper가 true면 아래 삼각형의 요소를 위 삼각형의 요소에 대칭 복사하고, false면 위 삼각형 요소를 아래 삼각형 요소에 대칭 복사한다.

[cv::convertScaleAbs()]
void cv::convertScaleAbs(
	cv::InputArray	src,			// 입력 배열
	cv::OutputArray	dst,			// 결과 배열
	double			alpha 	= 1.0,	// 스케일 계수
	double			beta 	= 0.0 	// 오프셋 계수
)

함수 내부에서 다른 함수를 순차 호출한다. 즉, 4개의 연산을 순차적으로 실행한다.
첫 번째 연산은 파라미터 alpha로 원본 이미지의 스케일을 조정한다.
두 번째 연산은 파라미터 beta를 더한다.
세 번째 연산은 합한 결과의 절대값을 계산한다.
네 번째 연산은 결과를 8비트 uchar 타입으로 포화 캐스트한다.
alpha와 beta에 대한 기본값을 전달하면 의미없는 성능 저하가 발생하지 않는다.

[cv::countNonZero()]
int cv::countNonZero(
	cv::InputArray mtx 	// 입력 배열
)

mtx에서 0이 아닌 요소의 수를 반환한다.

[cv::cvarrToMat()]
cv::Mat cv::cvarrToMat(
	const CvArr*	src,				// 입력 배열: CvMat, IplImage, CvMatND
	bool			copyData = false,	// false면 새로운 헤더만 생성
										// true면 헤더 뿐만 아니라 데이터도 복사 생성한다.
	bool			allowND = true,		// true일 때, 가능하면 CvMatND를 Mat로 변환한다.
	int 			coiMode = 0 		// 1이면 COI는 무시한다.
)

오래된 스타일의 이미지 또는 행렬 타입을 최신 타입의 Mat 객체로 변환하고자 할 때 cv::cvarrToMat() 함수를 사용한다. 기본값은 데이터를 복사하지 않고 배열의 헤더만 새로 생성한다. 대신, 새로운 헤더의 데이터 포인터는 기존 데이터 배열을 가리키에 메모리에서 해제시키면 안 된다. 데이터가 복사되기를 원하면 copyData를 true로 설정하기만 하면 기존 데이터를 삭제해도 된다.
cv::cvarrToMat() 함수는 CvMatND 구조체도 전달인자로 취할 수 있지만 연속적이거나 최소한 연속된 행렬을 순차적으로 표현할 수 있어야 한다. 파라미터 allowND가 true면 CvMatND 구조체 발견 시 변환을 시도, 변환을 할 수 없다면 예외를 던진다. false면 만날 때마다 예외를 던진다.

[cv::dct()]
void cv::dct(
	cv::InputArray	src,	// 입력 배열
	cv::OutputArray	dst,	// 결과 배열
	int 			flag 	// 역변환 또는 행 단위로
)

파라미터 flag에 따라 이산 코사인 변환과 역변환을 수행한다. src는 1차원 또는 2차원이어야 하고 크기는 짝수여야 한다.(패딩해도 된다.) dst는 src와 같은 타입과 크기를 가져야 한다. flags는 비트 필드고 DCT_INVERSE나 DCT_ROWS 플래그 중 하나 또는 둘 함께 사용할 수 있다. DCT_INVERSE는 역변환을 수행하고, DCT_ROWS는 2차원 n*m 입력은 길이 m의 n개의 개별적인 1차원 벡터로 취급된다. 이 경우 각 벡터는 독립적으로 변환된다.
성능은 전달된 배열의 크기에 의존하며, 배열의 크기와 성능의 상관관계는 단순 비례관계가 아니다. 최적 크기는 2 * cv::getOptimalDFTSize((N+1)/2) 로 계산해야 한다.

[cv::dft()]
void cv::dft(
	cv::InputArray	src,				// 입력 배열
	cv::OutputArray	dst,				// 결과 배열
	int 			flags 		= 0 	// 역변환 또는 행 단위
	int 			nonzeroRows = 0 	// 항목이 0이 아닌 경우에만
)

flags에 따라 이산 푸리에 변환과 역변환을 수행한다. src는 1차원 또는 2차워이어야 한다. dst는 src와 같은 타입과 크기를 갖는다. flags는 비트 필드로, DFT_INVERSE나 DFT_ROWS, DFT_SCALE, DFT_COMPLEX_OUTPUT, DFT_REAL_OUTPUT 플래그 중 하나 이상으로 설정할 수 있다.
DFT_INVERSE는 역변환을 수행한다. DFT_ROWS는 2차원 배열 n*m 입력은 길이 m의 n개의 새별 1차원 벡터로 취급되고, DFT_SCALE는 배열 요소의 개수로 결과를 정규화 한다. 역의 역함수가 올바른 정규화를 보장하는 것처럼 DFT_INVERSE에 대해서도 정규화를 수행한다.
DFT_COMPLEX_OUTPUT, DFT_REAL_OUTPUT 플래그는 실수 배열의 푸리에 변환을 계산할 때 결과가 복소수 켤레의 대칭을 가지므로 유용하다. 결과가 복소수라고 해도 배열 요소의 개수는 그 수의 두 배가 아닌 입력된 실수 배열의 요소 개수와 같게 된다. 이런 패킹이 해당 함수의 기본 동작이다.
출력을 강제로 복소수 형식으로 설정하려면 DFT_COMPLEX_OUTPUT 플래그를 설정한다. 입력 배열이 복소수 켤레 대칭을 갖는 경우(실수 배열의 푸리에 변환 결과 자체인 경우)를 미리 알고 있고 결과 배열을 실수 배열(복소수에 비해 메모리 절반만 사용)로 나태내고 싶다면 DFT_REAL_OUTPUT 플래그를 설정하면 된다.
마지막 파라미터인 nonzeroRows는 기본 값은 0이지만 다른 값을 넣으면 입력 배열의 첫 번째 nonzeroRows만 실제로 의미가 있다고 가정한다.(DFT_INVERSE나 플래그를 같이 설정한 경우, 출력 배열의 첫 번째 nonzeroRows는만이 0이 아닌 것으로 가정한다) 이 플래그는 컨벌루션 교차 상관관계를 계산할 때 유용하다.
성능은 전달한 배열의 크기에 따라 달라지지만, 배열의 크기와 성능은 단순 비례 관계는 아니고 cv::dct()처럼 좋은 성능을 내는 크기가 따로 있다. 이 크기는 cv::getOptimalDFTSize()로 계산한다.

[cv::cvtColor()]
void cv::cvtColor(
	cv::InputArray	src,		// 입력 배열
	cv::OutputArray	dst,		// 결과 배열
	int 			code,		// 색상 코드 매핑
	int 			dstCn = 0 	// 출력 채널(0은 자동)
)

데이터 타입을 같게 유지하고 한 색상 공간(채널 수)을 다른 색상 공간으로 변환할 때 사용한다.
src는 8비트 배열이나 16비트 부호 없는 배열, 32비트 부동소수점 배열이 될 수 있다.
dst의 크기와 깊이는 입력 배열과 같다. dst에 필요한 채널 수를 dstCn으로 지정한다. 기본값 0을 지정하면 src의 채널 수와 변환 코드에 의해 결과 채널 수가 결정된다.
code에 들어갈 수 있는 flags 모음 <https://docs.opencv.org/4.5.5/d8/d01/group__imgproc__color__conversions.html#ga4e0972be5de079fed4e3a10e24ef5ef0>

[cv::determinant()]
double cv::determinant(cv::InputArray mat)

정방 배열의 행렬식을 계산한다. 배열 mat의 타입은 부동 소수점데이터 타입 중 하나여야 하고, 단일 채널이어야 한다. 행렬 크기가 작은 경우 행렬식은 표준 공식으로 직접 계산된다. 큰 행렬의 경우 가우스 소거법으로 행렬식을 계산한다.
행렬이 대칭적이로 행렬식이 양수라는 것을 안다면, 특이값 분해(SVD)를 편법으로 사용할 수 있다.

[cv::divide()]
void cv::divide(
	cv::InputArray	src1,			// 첫 번째 입력 배열(분자)
	cv::InputArray	src2,			// 두 번째 입력 배열(분모)
	cv::OutputArray	dst,			// 결과 배열, scale*src1 / src2
	double			scale = 1.0,	// 스케일 계수
	int 			dtype = -1		// dst 타입 지정
)

void cv::divide(
	double			scale,	// 모든 분자의 값
	cv::InputArray	src2,			// 두 번째 입력 배열(분모)
	cv::OutputArray	dst,			// 결과 배열, scale / src2
	int 			dtype = -1		// dst 타입 지정
)

src1의 요소를 src2의 대응하는 요소로 나눈 결과를 dst의 대응 요소에 저장한다.

[cv::eigen()]
bool cv::eigen(
	cv::InputArray	src,
	cv::OutputArray	eigenvalues,
	int 			lowindex	= -1,
	int 			highindex	= -1
)

bool cv::eigen(
	cv::InputArray	src,
	cv::OutputArray	eigenvalues,
	cv::OutputArray	eigenvectors,
	int 			lowindex	= -1,
	int 			highindex	= -1
)

대칭 행렬 src가 주어지면 해당 함수는 src 행렬의 고유벡터와 고유값을 계산한다. 행렬 타입은 부동 소수점 타입 중 하나가 돼야 한다. 결과 배열 eigenvalues는 내림차순으로 행렬 src의 고유값을 포함한다. 결과 배열 eigenvectors가 주어지면 eigenvalues 배열의 고유값과 대응하는 순서로 고유벡터를 eigenvectors가 배열의 행에 저장한다. 추가적인 lowindex, highindex 파라미터를 사용하면 계산할 고유값 중 일부만 요청할 수 있다. 예를들어 lowindex=0, highindex=1이면 가장 큰 두 개의 고유베거만 계산한다.

[cv::exp()]
void cv::exp(
	cv::InputArray	src,
	cv::OutputArray	dst
)

src의 요소로 지수 계산한 결과를 dst의 대응 요소에 저장한다.

[cv::extaractImageCOI()]
bool cv::extaractImageCOI(
	const CvArr*	arr,
	cv::OutputArray	dst,
	int 			coi = 1
)

파라미터 arr로 예전 스타일로 주어진 IplImage 또는 CvMat 타입의 관심 채널(COI)을 추출해서 dst에 저장한다. 파라미터 coi를 지정하면 특정 COI를 추출한다. 그렇지 않으면 추출할 채널을 결정하기 위해 src의 COI 필드를 조사한다.
이전 버전 배열을 함께 사용하기 위해 제공되는 함수이며 cv::Mat 객체에서 단일 채널을 추출해야한다면 cv::mixChannels()나 cv::split()을 사용하면 된다.

[cv::filp()]
void cv::filp(
	cv::InputArray	src,			// 입력 배열
	cv::OutputArray	dst,			// 결과 배열, src와 같은 크기/타입
	int 			filpCode = 0 	// >0 → y vmfflq, 0 → x 플립, <0  → 양방향 플립
)

x축이나 y축 또는 양축 모두를 기준으로 이미지를 플립한다. 왼쪽 상담 원점 이미지와 왼쪽 하단 원점 이미지를 서로 변환할 때 자주 사용한다.

[cv::gemm()]
void cv::gemm(
	cv::InputArray	src1,	// 입력 배열 1
	cv::InputArray	src2,	// 입력 배열 2
	double			alpha,	// src1, src2에 적용할 가중치
	cv::InputArray	src3,	// 입력 배열 3
	double			beta,	// src3에 적용할 가중치
	cv::OutputArray	dst, 	// 결과 배열
	int 			flags 	// 입력 배열을 전치하기 위해 사용
)

행렬 곱셈, 전치를 통한 곱셈, 스케일 곱셈 등을 수행하는 일반화된 행렬 곱셈 함수로 수행한다.
src1~3은 행렬이고, alpha/beta는 수치 계수이다. flags는 0, cv::GEMM_1_T(src1을 전치연산), cv::GEMM_2_T, cv::GEMM_3_T 플래그(각 플래그는 대응하는 입력 행렬을 의미)로 OR 연산(|)을 수행할 수 있고 대응하는 입력 행렬의 전치 연산 여부를 지정한다.
모든 행렬은 행렬 곰셉에 적절한 크기여야 하고 부동 소수점 타입이어야 한다. cv::gemm()은 단일 채널의 복소수 또는 2채널의 부동 소수점 행렬을 지원한다.

[cv::getConvertElem()과 cv::getConvertScaleElem()]
cv::convertData cv::getConvertElem(
	int 	fromType,	// 입력 픽셀 타입(Ex. cv::U8)
	int 	toType		// 출력 픽셀 타입(Ex. CV_32F	)
)
typedef void (*ConvertData) (
	const void* from,	// 입력 픽셀 위치의 주소
	void*		to,		// 결과 픽셀 위치의 주소
	int 		cn 		// 채널 수
)

cv::convertScaleData cv::getConvertScaleElem(
	int 	fromType,	// 입력 픽셀 타입(Ex. cv::U8)
	int 	toType		// 출력 픽셀 타입(Ex. CV_32F	)
)
typedef void (*convertScaleData)(
	const void* from,	// 입력 픽셀 위치의 주소
	void*		to,		// 결과 픽셀 위치의 주소
	int 		cn,		// 채널 수
	double		alpha, 	// 스케일 계수
	double		beta 	// 오프셋 계수
)

cv::getConvertElem()과 cv::getConvertScaleElem()는 OpenCV가 사용하는 특정 변환 함수의 포인터를 반환한다.
cv::getConvertElem() 함수는 파라미터로 두 데이터의 포인터와 채널 수를 가진 함수 포인터를 ConvertData 타입으로 반환한다. ConvertData의 파라미터 cn은 변환할 fromType 주소에 인접한 실제객체 수를 의미한다.
cv::getConvertScaleElem() 함수는 파라미터 alpha와 beta를 더 추가한 변환 함수의 포인터를 반환한다. 변환 함수가 원하는 타입으로 변환하기 전에 스케일과 오프셋을 적용하는데 사용한다.

[cv::idct()]
void cv::idct(
	cv::InputArray	src,	// 입력 배열
	cv::OutputArray	dst,	// 결과 배열
	int 			flags 	// 행 단위로
)

이산 코사인 역변환에 대한 편이 함수다. cv::dct() 함수 호출에서 DCT_INVERSE 플래그 값을 준 것과 동일하게 동작한다.

[cv::idft()]
void cv::idft(
	cv::InputArray	src,			// 입력 배열
	cv::OutputArray	dst,			// 결과 배열
	int 			flags,		 	// 행 단위로 외 등등
	int 			nonzeroRows 	// 항목이 0이 아닌 경우에만
)

이산 푸리에 역변환에 대한 편이 함수다. cv::dft() 함수에서 DFT_INVERSE 플래그 값을 준 것과 동일하게 동작한다.

[cv::inRange()]
void cv::inRange(
	cv::InputArray 	src,	// 입력 배열
	cv::InputArray 	upperb,	// 위 경계 배열 (자신 포함)
	cv::InputArray 	lowerb,	// 아래 경계 배열 (자신 포함)
	cv::OutputArray	dst 	// 결과 배열 (cv::U8C1 타입)
)

src가 1차원 배열이면 src의 각 요소를 대응하는 upperb, lowerb 요소 값 범위와 비교한다. src의 요소가 주어진 값 범위에 있으면 dst의 대응하는 요소를 255로 설정하고 아니면 0으로 설정한다.
하지만 src, upperb, lowerb가 모두  다중 채널 배열인 경우에도 dst는 단일 채널이다. 모든 레이어의 src에 있는 i요소의 값이 모든 레이어의 upperb, lowerb의 i요소 값 범위에 있다면 dst의 단일 채널 i요소를 255로 설정한다.

[cv::insertImageCOI()]
void cv::insertImageCOI(
	cv::InputArray 	img,		// 입력 배열 (단일 채널)
	CvArr*			arr,		// 결과 배열 (예전 스타일 배열 타입)
	int 			coi = -1	// 대상 채널
)
IplImage, CvMat 타입 같은 예전 스타일의 배열과 연동할 목적으로 제공하는함수다. 새로운 스타일인 cv::Mat 객체에서 데이터를 가져와 이전 버전 배열의 특정 채널에 데이터를 쓰는 것이다. img는 단일 채널 cv::Mat 객체인데 반해, arr은 다중 채널 객체다. 두 배열 모두 크기가 같아야 한다. img 데이터를 arr의 coi채널에 복사한다.

[cv::invert()]
double cv::invert(
	cv::InputArray 		src,					// 입력 배열 m*n
	cv::OutputArray 	dst,					// 결과 배열 n*m
	int 				method = cv::DECOMP_LU	// 의사 역 메서드
)

src 행렬의 의사 역(pseudo-inverse)을 구하고 결과를 dst에 저장한다. src가 특이 행렬이면 0을 반환한다. src는 부동 소수점 타입이어야 하고 dst는 입력 배열과 같은 타입이 된다. src가 정방 행렬을 필요는 없다. 입력이 n*m이라면 결과는 m*n 행렬이 된다.

method 값
- cv::DECOMP_LU			가우스 소거법(LU 분해)
- cv::DECOMP_SVD		특이값 분해(SVD)
- cv::DECOMP_CHOLESKY	양의 정부호 대칭 행렬에 대해서만 가능

cv::DECOMP_LU는 src의 행렬식을 함수 반환값으로, dst에는 역행렬이 저장된다 반환 행렬식이 0이면 역변환은 실패한거고 dst의 모든 요소가 0이 된다.
cv::DECOMP_SVD는 행렬에 대한 역 조건 수(가장 작은 고유값에 대한 가장 큰 고유값의 비율)를 함수 반환값으로 반환한다. src가 특이 행렬이면 의사 역을 계산한다. 다른 두 방법은 src가 정방 행렬, 비특이 행렬, 양의 정부호 행렬일 때 의사 역으로 계산할 수 있다.

[cv::log()]
void cv::log(
	cv::InputArray	src,
	cv::OutputArray	dst
)

src의 요소 값으로 자연 로그를 계산하고 그 결과를 dst의 대응 요소에 저장한다. src 픽셀 요소 값이 0 이하면 dst 대응 요소에 큰 음수 값이 저장된다.

[cv::LUT()]
void cv::LUT(
	cv::InputArray	src,
	cv::InputArray	lut,
	cv::OutputArray	dst
)

src에 대한 룩업 테이블 변환(lookup table transform)을 수행한다. 이 함수가 실행되려면 배열 src가 8비트 인덱스 값을 가져야 한다. lut는 룩업 테이블이 된다. lut는 정확하게 256개의 요소를 가지고, 단일 채널이거나 다중 채널 src 배열인 경우 원본 배열과 같은 수의 채널을 가질 수도 있다. src의 요소 인덱스에 대응하는 룩업 테이블 값을 찾아 dst 대응 요소에 저장한다.
src가 부호 있는 8비트 숫자인 경우 자동을 +128만큼 오프셋한 인덱스 값에 대응하는 값을 룩업 테이블에서 찾는다.
룩업 테이블이 다중 채널이고 src가 단일 채널이면 다중 테이블에 대응하늘 채널과 요소 값을 사용하고 dst는 단일 채널이 된다. dst는 src와 같은 크기, 같은 채널 수가 되고, lut와 같은 깊이를 갖는다
룩업 테이블이 1차원이고 src가 다중 채널이면 src의 각 채널은 1차원 룩업 테이블을 사용하고 dst는 src와 같은 다중 채널배열이 된다.

[cv::magnitude()]
void cv::magnitude(
	cv::InputArray	x,
	cv::InputArray	y,
	cv::OutputArray	dst
)

2차원 벡터 필드의 직교 좌표에서 극좌표로 변환할 때 사용되는 길이를 계산한다. x와 y는 같은 크기여야 한다. (2채널 배열은 cv::split()을 이용해 개별 채널로 분리해야 한다.) x와 y의 두 요소에 대한 유클리드 놈(제곱합에 대한 제곱근)을 계산해서 dst의 대응 요소에 저장한다.

[cv::Mahalanobis()]
cv::Size cv::Mahalanobis(
	cv::InputArray	vec1,
	cv::InputArray	vec2,
	cv::OutputArray	icovar
)

마할라노비스 거리는 점과 가우스 분포의 중심 간의 측정 거리를 벡터 거리로 정의한다. 이 때 거리를 분포의 역공분산을 사용해서 계산한다. 분포의 중심은 통계의 표준 점수와 유사하고, 중시믕로부터의 거리는 해당 분포를 분산 단위로 측정하는 것과 유사하다. 마힐라노비스 거리는 이러한개념을 다중 확률 변수에 대해 일반화한 것이다.
vec1은 점 x로 가정하고, vec2는 분포의 평균으로 간주한다. icovar에는 역공분산이 저장된다.

[cv::max()]
cv::MatExpr cv::max( 		// 행렬 표현식 반환
	const cv::Mat&	src1,	// 입력 배열
	const cv::Mat&	src2 	// 입력 배열
)

cv::MatExpr cv::max( 		// 행렬 표현식 반환
	const cv::Mat&	src1,	// 입력 배열
	double			value 	// 입력 스칼라
)

cv::MatExpr cv::max( 		// 행렬 표현식 반환
	double			value 	// 입력 스칼라
	const cv::Mat&	src1,	// 입력 배열
)

void cv::max( 		// 행렬 표현식 반환
	cv::InputArray	src1,	// 입력 배열
	cv::InputArray	src2 	// 입력 배열
	cv::OutputArray	dst,	// 결과 배열
)

void cv::max( 		// 행렬 표현식 반환
	const cv::Mat&	src1,	// 입력 배열
	const cv::Mat&	src2 	// 입력 배열
	cv::Mat&		dst,	// 결과 배열
)

void cv::max( 		// 행렬 표현식 반환
	const cv::Mat&	src1,	// 입력 배열
	double			value 	// 입력 스칼라
	cv::Mat&		dst,	// 결과 배열
)

src1와 src2의 대응하는 픽셀 쌍의 최댓값을 계산한다. 행렬 표현식을 반환하는 형식과 결과 계산 후 지정한 변수에 값을 넣어주는 두 가지 형식이 있다. 매개변수 중 하나가 cv::Scalar인 경우 다중 채널 배열은 해당 값과 각 채널의 요소 값을 비교해 최대값은 계산한다.

[cv::mean()]
cv::Scalar cv::mean(
	cv::InputArray	src,
	cv::InputArray 	mask = cv::noArray() // 0이 아닌 위치만 연산한다.
)

src에서 mask가 되지 않은 모든 픽셀의 평균 값을 계사한다. src가 다중 채널은 경우 반환 결과는 채널별로 계산된다.

[cv::meanStdDev()]
void cv::meanStdDev(
	cv::InputArray	src,
	cv::OutputArray	mean,
	cv::OutputArray	stddev,
	cv::InputArray 	mask = cv::noArray() // 0이 아닌 위치만 연산한다.
)

src에서 mask가 되지 않은 모든 픽셀의 평균값과 ㅍ준 편차를 계산한다. src가 다중 채널인 경우 출력 배열은 평균과 표준 편차를 채널별로 계산한다. 여기서는 실제 공분산 행렬(cv::calcCovarMatrix())의 전체 대각선 요소가 계산된 표준 편차가 된다.

[cv::merge()]
void cv::merge(
	const cv::Mat*	mv,		// 배열에 대한 C 스타일 배열
	size_t			count,	// mv가 가리키는 배열의 수
	cv::OutputArray	dst 	// mv의 모든 채널을 포함한 하나의 출력 배열
)

void merge(
	const vector<cv::Mat>&	mv,	// 배열의 STL 스타일배열
	cv::OutputArray			dst // mv의 모든 채널을 포함한 하나의 출력 배열
)

cv::merge() 함수는 cv::split() 함수의 반대 연산이다. mv에 포함된 배열은 출력 배열 dst에 합쳐진다. mv가 cv::Mat 객체의 C 스타일 배열에 대한 포인터인 경우, 배열의 크기를 count로 제공해야 한다.

[cv::min()]
cv::MatExpr cv::min(		// 행렬 표현식 반환
	const cv::Mat&	src1,
	const cv::Mat&	src2
)

cv::MatExpr cv::min(		// 행렬 표현식 반환
	const cv::Mat&	src1,
	double			value
)

cv::MatExpr cv::min(		// 행렬 표현식 반환
	double			value,
	const cv::Mat&	src1
)

void cv::min(
	cv::InputArray	src1,
	cv::InputArray	src2,
	cv::OutputArray	dst
)

void cv::min(
	const Mat&	src1,
	const Mat&	src2,
	Mat&		dst
)

void cv::min(
	const Mat&	src1,
	double		value,
	Mat&		dst
)

src1과 src2(또는 하나의 소스 행렬이나 단일값)의 대응하는 픽셀 쌍에서 최솟값을 계산한다. 결과 행렬 또는 OpenCV 행렬 표현식 라이브러리로 표현된 표현식을 dst에 저장하는 함수 변형이 있다.
전달인자 중 하나가 cv::Scalar인 경우, 다중 채널 배열은 cv::Scalar 값과 각 채널의 요소 값 중에서 최솟값을 계산한다.

[cv::minMaxIdx()]
void cv::minMaxIdx(
	cv::InputArray	src,					// 입력 배열 (단일 채널)
	double*			minVal,					// min 값 저장 (NULL이 아니면)
	double*			maxVal,					// max 값 저장 (NULL이 아니면)
	int*			minIdx,					// min 값의 위치 저장 (NULL이 아니면)
	int*			maxIdx,					// max 값의 위치 저장 (NULL이 아니면)
	cv::InputArray	mask = cv::noArray()	// 0이 아닌 위치만 검색
)

void cv::minMaxIdx(
	const cv::SparseMat&	src,	// 희소 입력 배열
	double*					minVal,	// min 값 저장 (NULL이 아니면)
	double*					maxVal,	// max 값 저장 (NULL이 아니면)
	int*					minIdx,	// min 값의 위치 저장 (C 스타일 배열)
	int*					maxIdx,	// max 값의 위치 저장 (C 스타일 배열)
)

src에서 NULL이 아닌 경우에 최솟값과 최댓값을 찾고 위치를 반환한다. 계산한 최대값과 최소값을 각각 maxVal, minVal에 저장한다. 옵션으로, 극한치의 위치를 반환할 수 있다. 전달인자가 NULL이 아닐 때 minIdx와 maxIdx에 이 위치를 저장한다.
cv::SparseMat의 희소행렬을 사용해 호출할 수도 있다. 이 경우에도 단일 채널의 다중 차원 배열에서 최솟값과 최댓값을 계산하고 위치를 반환한다. 극한의 위치를 C 스타일 배열로 minIdx와 maxIdx에 저장한다. 두 배열을 제공해야 할 때 모두 src 차원 수와 같은 수의 요소를 가져야 한다. 

[cv::minMaxLoc()]
void cv::minMaxLoc(
	cv::InputArray	src,
	double*			minVal,					// min 값 저장 (NULL이 아니면)
	double*			maxVal,					// max 값 저장 (NULL이 아니면)
	cv::Point*		minLoc,					// min 값의 위치 저장 (NULL이 아니면)
	cv::Point*		maxLoc,					// max 값의 위치 저장 (NULL이 아니면)
	cv::InputArray	mask = cv::noArray()	// 0이 아닌 위치만 검색
)

void cv::minMaxLoc(
	const cv::SparseMat&	src,	// 희소 입력 배열
	double*					minVal,	// min 값 저장 (NULL이 아니면)
	double*					maxVal,	// max 값 저장 (NULL이 아니면)
	cv::Point*				minLoc,	// min 값의 위치 저장 (C 스타일 배열)
	cv::Point*				maxLoc,	// max 값의 위치 저장 (C 스타일 배열)
)

src에서 NULL이 아닌 경우에 최솟값과 최댓값을 계산하고 위치를 반환한다. 계산한 최솟값과 최댓값을 minVal과 maxVal에 각각 저장한다. 옵션으로 극한치의 위치 또한 반환할 수 있다. 이 위치는 전달인자가 NULL이 아닌경우 minLoc과 maxLoc이 제공하는 메모리 주소에 기록된다. 함수 위치로 cv::Point 타입을 사용해서 2차원 배열에서만 사용할 수 있다.
희소 행렬을 이용할 수도 있으며 다중 채널 배열에서는 최솟값과 최댓값을 계산할 때 다른 방법을 사용해야 한다. cv::minMaxLoc()은 기본적으로 다중 채널 배열은 지원하지 않기 때문이다.
모든 채널에서 최솟값과 최댓값을 원하면 cv::reshape() 함수로 다중 채널 배열을 하나의 거대한 단일 채널 배열로 바꾸면 된다. 개별적인 채널에 대한 최솟값, 최대값을 구하려면 cv::split() 또는 cv::mixChannels()를 사용하여 채널을 분리하면 된다.
최솟값/최대값이나 위치에 대한 전달인자를 NULL로 설정하면 해당 파라미터는 계산하지 않는다.

[cv::mixChannels()]
void cv::mixChannels(
	const cv::Mat*	srcv,	// 행렬에 대한 C 스타일 배열
	int 			nsrc,	// srcv의 요소 수
	cv::Mat* 		dstv,	// 목적 행렬에 대한 C 스타일 배열
	int 			ndst,	// dstv의 요소 수
	const int* 		fromTo,	// ...from, to.. 쌍에 대한 C 스타일 배열
	size_t			n_pairs	// fromTo 쌍의 수
)

void cv::mixChannels(
	const vector<cv::Mat>& 	srvc,	// 행렬에 대한 STL 스타일 벡터
	vector<cv::Mat>&		dstv,	// 목적 행렬에 대한 STL 스타일 벡터
	const int* 				fromTo,	// ...from, to.. 쌍에 대한 C 스타일 배열
	size_t					n_pairs	// fromTo 쌍의 수
)

OpenCV 연산에서 특별한 경우에 입력된 하나 이상의 이미지 채널을 재정렬해 하나 이상의 이미지의 특정 채널로 정렬해 출력하는 경우가 많다. cv::split()과 cv::merge(), cv::cvtColor() 함수의 일부 연산에서 이런 기능을 사용한다. 이러한 함수들은 더 일반적인 cv::mixChannels()함수를 호출해 필요한 작업을 수행한다. 이를 사용하면 입력에 다중 채널을 가진 다중 배열을 제공하고 출력에 배열을 사용하고 입력 배열의 채널을 출력 배열의 원하는 채널로 맵핑할 수 있다.
맵핑은 C 스파일 배열 fromTo로 제어한다. 이 배열은 순차 순서쌍을 여러 개 포함하는데, 각 쌍의 첫 번째 값은 소스 채널이고 두 번째 값은 복사할 대상의 채널을 나타낸다.

[cv::mulSpectrums()]
doublevoid cv::mulSpectrums(
	cv::InputArray	arr1,			// 입력 배열 1
	cv::InputArray	arr2,			// 입력 배열 2, arr1과 같은 크기
	cv::OutputArray	dst,			// 결과 배열, arr1과 같은 크기
	int 			flags,			// 개별 행을 나타내는 데 사용
	bool			conj = false 	// true면 arr2를 먼저 결합
)

arr1과 arr2는 같은 크기의 타입을 갖는 1차원 또는 2차원이 될 수 있다. 입력 배열이 2차원이면 2차원 스펙트러 또는 1차원 스펙트럼(행당 1개)의 배열이 실제 입력으로 사용될 수 있다. 후자의 경우 파라미터 flags를 cv::DFT_ROWS로 설정하고, 아니라면 0으로 설정한다.
푸리에 변환을 사용해서 상관관계를 분석하려면 conj = true를 사용하겠지만, 건벌루션의 경우에는 false를 사용한다.

[cv::multiply()]
void cv::multiply(
	cv::InputArray	src1,			// 입력 배열 1
	cv::InputArray	src2,			// 입력 배열 2
	cv::OutputArray	dst,			// 결과 배열
	double 			scale = 1.0,	// 스케일 계수
	int 			dtype = -1		// dst의 타입 지정
)

cv::multiply()는 단순 곱셈 함수이다. src2와 src1의 요소를 서로 곱한 결과를 dst 대응 요소에 저장한다.

[cv::mulTransposed()]
void cv::mulTransposed(
	cv::InputArray	src1,
	cv::OutputArray	dst,
	bool			aTa,						// true면 전치 후 곱셈
	cv::InputArray	delta	= cv::noArray(),	// 곱하기 전에 src1에서 뺀다.
	double 			scale = 1.0,				// 스케일 계수
	int 			dtype = -1					// dst의 타입 지정
)

cv::mulTransposed() 함수는 행렬과 그 행렬의 전치를 서로 곱할 때 사용한다. 공분산 계산에 매우 유용하다. src는 2차원과 단일 채널이어야 하고, cv::gemm() 함수와 달리 타입은 부동 소수점 타입 외에 다른 타입도 가능하다. 파라미터 dtype으로 달리 타입을 지정하지 않는 한 결과는 소스와 같은 타입이 된다. dtype이 음수(기본값)가 아닌 경우 CV_32F 또는 CV_64F 중 하나가 돼야 한다. 그러면 dst의 타입이 dtype으로 지정한 타입이 된다.
delta를 제공하면 행렬을 곱하기 전에 src에서 delta 행렬을 뺀다. 제공하지 않으면 뺄셈을 수행하지 않는다. delta는 src와 크기가 같을 필요가 없다. src보다 작으면 src와 같은 크기의 배열을 생성하기 위해 delta를 타일링한다(cv::repeat()). 파라미터 scale은 곱셈이 완료된 행렬에 적용된다. aTa는 src의 전치된 행렬을 왼쪽에 곱할지(aTa=true), 오른쪽에 곱할지(aTa=false)를 택할 때 사용한다.

[cv::norm()]
double cv::norm(								// double 타입으로 norm 반환
	cv::InputArray	src1,						// 입력 배열
	int 			normType	= cv::NORM_L2,	// norm 유형 지정
	cv::InputArray	mask 		= cv::noArray()	// 0이 아닌 위치만 연산
)

double cv::norm(								// 차이에 대한 norm 계산
	cv::InputArray	src1,						// 입력 배열
	cv::InputArray	src2,						// 입력 배열
	int 			normType	= cv::NORM_L2,	// norm 유형 지정
	cv::InputArray	mask 		= cv::noArray()	// 0이 아닌 위치만 연산
)

double cv::norm(
	const cv::SparseMat&	src,						// 입력 희소 행렬
	int 					normType	= cv::NORM_L2,	// norm 유형 지정
)

배열을 norm으로 계산하거나 두 배열 간의 거리를 다양한 norm으로 계산할 때 사용한다. 두 번째 배열 파라미터 src2가 NULL이 아닌 경우 계산된 norm은 차이에 대한 norm이다. 즉, 두 배열 사이의 거리를 norm으로 계산한다. 모든 경우에 src1과 src2는 같은 크기와 채널 수를 가져야 한다. 모든 채널에 대해 norm을 함 께 계산한다.
normType, https://docs.opencv.org/4.5.5/d2/de8/group__core__array.html#gad12cefbcb5291cf958a85b4b67b6149f

[cv::normalize()]
void cv::normalize(
	cv::InputArray	src,
	cv::OutputArray	dst,
	double 			alpha, 		= 1,
	double 			beta, 		= 0,
	int 			normType, 	= cv::NORM_L2,
	int 			dtype, 		= -1,			// dst의 타입 지정
	cv::InputArray	mask 		= cv::noArray()	// 0이 아닌 위치만 연산
)

void cv::normalize(
	const cv::SparseMat&	src,
	cv::SparseMat&			dst,
	double 					alpha, 		= 1,
	int 					normType 	= cv::NORM_L2,
)

normType의 값에 따라 src는 정규화되거나 dst의 특정 범위에 매핑된다. dst의 크기는 src 크기와 같고 dtype으로 지정하지 않으면 src타입과 같은 타입을 가질 것이다. 필요한 경우 dtype을 OpenCV 기본 타입 중 하나로 설정할 수 있고, dst는 그 타입으로 지정된다. normType은 cv::NORM_INT, cv::NORM_L1, cv::NORM_L2, cv::NORM_MINMAX를 지정할 수 있다.

[cv::perspectiveTransform()]
void cv::perspectiveTransform(
	cv::InputArray	src,	// 입력 배열 (2 or 3 채널)
	cv::OutputArray	dst,	// 결과 배열 (src와 같은 크기의 타입)
	cv::InputArray	mtx 	// 변환 행렬 (3*3 또는 4*4 행렬)
)

점들(픽셀 X)로부터 평면 투영 변환을 실행한다. src는 2또는 3 채널이 돼야하고 mtx는 3*3, 4*4 행렬이 돼야 한다. src의 각 요소를 src.channels() + 1 길이의 벡터로 간주하고 추가 차원(투영 차원)을 1.0으로 설정해 변환한다. 이 좌표를 동차 좌표라고 한다. 각 확장된 벡터에 mtx를 곱한 결과는 투영 좌표의 새로운 값으로 조정된다.
주어진 많은 대응점에서 가장 가능성이 높은 원근 변환 행렬을 찾기 위해 역문제를 해결해야 한다면 cv::perspectiveTransform() 또는 cv::findHomography() 함수를 사용한다.

[cv::phase()]
void cv::phase(
	cv::InputArray	x,
	cv::InputArray	y,
	cv::OutputArray	dst,					// 도 또는 라디안 단위
	bool			angleInDegrees = false 	// true: 도 단위, false: 라디안 단위
)

2차원 벡터 필드에서 직교 좌표-극좌표 변환에 사용하는 방위각을 계산한다. 두 입력 배열은 같은 크기를 가져야 한다. (단일 2채널 배열을 가지고 있다면 cv::split() 함수를 호출해 쉽게 2개의 단일 채널로 변경 가능) cv::phase() 함수는 x, y에 대응하는 요소에 대한 아크탄젠드(역탄젠트)값을 계산에 dst에 저장한다.

[cv::polarToCart()]
void cv::polarToCart(
	cv::InputArray	magnitude,				// 길이
	cv::InputArray	angle,					// 방위각
	cv::OutputArray	x,
	cv::OutputArray	y,
	bool			angleInDegrees = false 	// true: 도 단위, false: 라디안 단위
)

극좌표에서 직교 좌표의 벡터 필드를 계산한다. 같은 크기의 타입을 가진 두 입력 배열 magnitude, angle이 필요한데, 두 배열은 각 점에 대한 길이와 각을 표현한다. 입력 배열과 같은 크기와 타입의 투 출력 배열 x, y는 직교 좌표의 위치를 저장한다.

[cv::pow()]
void cv::pow(
	cv::InputArray	src,
	doubble			p,		// 지수의 승수(power)
	cv::OutputArray	dst,
)

src의 요소를 지수로 하고 승수 p를 적용한 결과를 계산한다. p가 정수면 지수 승을 직접 계산한다. p가 정수가 아니면, 입력된 값의 절대값을 먼저 계산하고 나서 p를 승수로 사용한다. (실수 값만 반환한다.)

[cv::randu()]
template<typename _Tp>_Tp randu();	// 특정 타입의 난수 반환
void cv::randu(
	cv::InputOutArray	mtx,		// 입출력 배열, 미리 할당, 난수 저장
	cv::InputArray		low,		// 최솟값, 1*1(NC=1, 4) 또는 1*4(NC=1)
	cv::InputArray		high 		// 최댓값, 1*1(NC=1, 4) 또는 1*4(NC=1)
)

호출 방법은 두 가지다. 첫 번째 방법은 randu<>() 템플릿 형태인데, 적당한 타입으로 난수를 반환한다. 이 방법으로 생성한 난수는 정수 타입에 대해서는 0~최댓값 범위, 부등 소수점 타입에 대해서는 0.0~1.0(1.0은 미포함) 사이의 값으로 균을 분포하는 난수를 생성 (단일 숫자만 생성)
두 번째 방법은 값을 채우려는 mtx와 난수 범위를 나타내는 최소, 최댓값을 의미하는 low, high 추가 배열을 사용하는 것이다. 두 추가 배열은 1채널 또는 4채널을 가진 1*1 행렬이거나 단일 채널을 가진 1*4 행렬이어야 한다. 두 배열의 타입 또한 cv::Scalar 타입이 될 수 있다. 두 차가 배열은 mtx의 각 요소에 대한 크기다. mtx는 입출력으로 모두 사용되며, cv::randu() 함수에 필요한 난수의 개수와 행, 열과 채널이 어떻게 정렬돼야 하는지 알 수 있도록 호출 전에 미리 할당돼야 한다.

[cv::randn()]
void cv::randn(
	cv::InputOutArray	mtx,		// 입출력 배열, 미리 할당, 난수 저장
	cv::InputArray		mean,		// 평균값, 1*1(NC=1, 4) 또는 1*4(NC=1)
	cv::InputArray		stddev 		// 표준 편차, 1*1(NC=1, 4) 또는 1*4(NC=1)
)

정규 분포를 가지는 임의의 값으로 mtx를 채운다. mtx 배열 요소에 생성하려는 난수의 정규 분포가 가져야할 평균과 표준 편차를 mean, stddev에 넣는다.
cv::randu()와 마찬 가지로 mtx 모든 요소는 개별적으로 계산되고, mtx의 각 채널 공간에 대한 평균과 표준 편차는 mean, stddev로 지정한다. 두 배열의 타입 또한 cv::Scalar 타입이 될 수 있다.

[cv::randShuffle()]
void cv::randShuffle(
	cv::InputOutArray	mtx,				// 입출력 배열: 결과 저장
	double 				iterFactor	= 1		// 반복 횟수
	cv::RNG*			rng 		= NULL 	// 원할 시, 자신만의 생성기 사용
)

임의의 쌍 요소를 선택하고 그 위치를 서로 바꿔 1차원 배열의 요소를 랜덤화한다. 전체 스왑 횟수를 배열 mtx의 크기에 파라미터 iterFactor를 곱한 값과 같다. 옵션으로 랜덤 생성기를 직접 제공할 수 있다. 제공하지 않으면 기본 난수 생성기 theRNG()가 자동으로 사용된다.

[cv::reduce()]
void cv::reduce(
	cv::InputArray	src,
	cv::OutputArray	vec,							// 결과, 1*m 또는 n*1
	int 			dim,							// reduce 방향, 0=row / 1=col
	int 			reduceOp	= cv::REDUCE_SUM,	// reduce 연산 종류
	int 			dtype 		= -1				// vec 타입 지정
)

각 행(또는 열)과 그 이웃에 있는 하나의 행(또는 열)만 남을 때까지 reduceOp 조합 규칙을 적용해 src를 vec로 체계적으로 변환한다. dim은 리덕션 연산 방식을 제어한다. dim이 0이면 단일 행으로 축소, 1이면 단일 열로 축소를 뜻한다. cv::reduce() 함수는 모든 타입의 다중 채널 배열을 지원한다.
reduceOp 종류 = https://docs.opencv.org/4.5.5/d2/de8/group__core__array.html#ga14cdedf2933367eb9395ec16798af994
REDUCE_SUM, REDUCE_AVG 같은 경우 dtype을 사용해 vec에 고정밀도 타일을 지정해야한다. 이 때 오버플로우와 합산 문제가 발생할 수도 있다.

[cv::repeat()]
void cv::repeat(
	cv::InputArray	src, 	// 입력 배열, 2차원
	int 			nx,		// x 방향 반복 횟수
	int 			ny,		// y 방향 반복 횟수
	cv::OutputArray	dst 	// 결과 배열
)

cv::Mat cv::repeat(			// 결과 배열을 반환
	cv::InputArray 	src, 	// 입력 배열, 2차원
	int 			nx,		// x 방향 반복 횟수
	int 			ny,		// y 방향 반복 횟수
)

src의 내용을 dst에 복사하고 dst를 채우는데 필요한 만큼 반복한다. 특히, dst는 src와 관련된 어떤 크기든지 될 수 있다. 그 크기는 src 크기보다 더 크거나 작을 수 있으며, src와 dst 크기는 서로 정수 관계를 가질 필요가 없다.

[cv::scaleAdd()]
void cv::scaleAdd(
	cv::InputArray	src1,
	double 			scale, 	// src1의 스케일 계수
	cv::InputArray	src2,
	cv::OutputArray	dst,
)

src1에 스케일 계수를 적용하고 src2와 합산한 결과를 dst에 저장한다. (dst = scale*src1 + src2)

[cv::setIdentity()]
cv::setIdentity(
	cv::InputOutArray	dst,					// 재설정 되는 결과 배열
	const 	cv::Scalar&	value = cv::Scalar(1.0)	// 대각선 요소에 적용할 값
)

행과 열의 위치가 같은 요소는 1(또는 제공된 값)로 설정하고 위치가 다른 요소는 0으로 설정한다. 모든 데이터 타입을 지원하고 dst는 정방 행렬일 필요 없다.

[cv::solve()]
int cv::solve(
	cv::InputArray	lhs,					// 왼쪽 입력, n*n
	cv::InputArray	rhs,					// 오른쪽 입력, n*1
	cv::OutputArray	dst,					// 결과 배열, n*1
	int 			method = cv::DECOMP_LU 	// 해를 구하는 메서드
)

cv::invert() 함수를 기반으로 선형 시스템의 해를 빠르게 구하는 방법을 제공한다.
lhs는 정방 행렬, rhs는 벡터, dst에는 최적 벡터를 반환한다. 시스템의 해를 구하는 데 사용한 메서드는 method의 값으로 설정한다.  부동 소수점 데이터 타입만 지원하며 0이 아닌 정수 값을 반환하면 해를 찾을 수 있다는 것이다.
DECOMP_LU, DECOMP_CHOLESKY는 특이 행렬에 사용할 수 있다. lhs가 특이 행렬이면 바로 종료하고 0을 반환하는 방식이다. 특이 행렬이 아니라면 1을 반환한다. lhs가 특이 행렬인데 특이값 분해나 QR 분해를 하려면 DECOMP_SVD와 DECOMP_QR를 사용하면 된다.
method 값 = https://docs.opencv.org/4.5.5/d2/de8/group__core__array.html#gaaf9ea5dcc392d5ae04eacb9920b9674c

[cv::solveCubic()]
int cv::solveCubic(
	cv::InputArray	coeffs,
	cv::OutputArray	roots
)

3차 다항식에 대한 3 또는 4요소 벡터 coeffs가 주어지면 다항식의 실제 해를 계산한다.
cv::solveCubic()과 cv::solvePoly()는 coeffs 순서가 서로 반대다. cv::solveCubic()은 높은 차수 순서로 계수가 배치되지만 cv::solvePoly()는 낮은 차수 순서로 계수가 배치된다.

[cv::solvePoly()]
int cv::solvePoly(
	cv::InputArray	coeffs,
	cv::OutputArray	roots,			// n 복소수 해(2채널)
	int 			maxIters = 300	// 해를 구하는 최대 반복 횟수
)

coeffs의 벡터 형태로 임의 차수의 다항식이 주어지면 다항식의 해를 계산하려고 한다. cv::solveCubic()과 달리 roots가 실제 해라는 보장은 없다. 차수 n의 다항식(coeffs가 n+1개의 요소를 갖는다.)의 경우 n 개의 해가 존재할 수 있다. roots는 double 타입의 2채널(실수부, 허수부) 행렬로 반환된다.

[cv::sort()]
void cv::sort(
	cv::InputArray	src,
	cv::OutputArray	dst,
	int 			flags
)

2차원 배열을 사용하고 단일 채널 소스 배열만 지원한다. 스프레드시트에서 행이나 열을 정렬하는 것과 같이 생각해서는 안 된다. cv::sort() 함수는 모든 행이나 열을 개별적으로 정렬한다. 결과는 src와 같은 크기와 타입을 가진 dst가 된다.
cv::SORT_EVERT_ROW, cv::SORT_EVERT_COLUMN 플래그는 모든 행 또는 열을 정렬할 수 있다. cv::SORT_ASCENDING 또는 cv::SORT_DESENDING 플래그를 지정하면 각각 오름차순 또는 내림차순에 따라 정렬한다. cv::SORT_EVERT_ROW, cv::SORT_EVERT_COLUMN 플래그는 함께 사용할 수 없고, cv::SORT_ASCENDING, cv::SORT_DESENDING 플래그도 함께 사용할 수 없다.

[cv::sortIdx()]
void cv::sortIdx(
	cv::InputArray	src,
	cv::OutputArray	dst,
	int 			flags
)

cv::sort()와 마찬가지로 단일 채널 2차원 배열에만 사용한다. 행이나 열을 개별적으로 정렬한다. 결과는 입력 배열과 같은 크기고 정렬된 정수 인덱스를 포함한 dst가 된다.
Ex. cv::sortIdx(A, B, cv::SORT_EVERT_ROW | cv::SORT_DESENDING);
A = [[0.0, 0.1, 0.2], [1.0, 1.1, 1.2], [2.0, 2.1, 2.2]]
B = [[2, 1, 0], [2, 1, 0], [2, 1, 0]]

[cv::split()]
void cv::split(
	const cv::Mat&	mtx,
	cv::Mat*		mv
)

void cv::split(
	const cv::Mat&	mtx,
	vector<Mat>&	mv 		// 1채널의 n개의 cv::Mat
)

cv::split() 함수는 cv::mixChannels() 함수를 특별히 단순화한 함수다. cv::split() 함수를 사용해 다중 채널 배열의 채널을 여러 개의 단일 채널로 분리한다. cv::split() 함수를 호출하는 방법은 두 가지다.
첫 번째 방식은 연산 결과로 C 스타일 cv::Mat 객체의 포인터 배열을 사용하는 것이다. 두 번째 방식은 연산 결과로 std::vector<cv::Mat> 객체를 사용한다. C 스타일 배열을 사용하는 경우, 사용 가능한 cv::Mat 객체 수가 mtx의 채널 수와 같거나 많아야 한다. STL 벡터 형식을 사용하는 경우 결과를 알아서 할당한다.

[cv::sqrt()]
void cv::sqrt(
	cv::InputArray	src,
	cv::OutputArray	dst
)

cv::sqrt() 함수는 cv::pow() 함수의 특별한 경우로, 배열의 원소 제곱근을 계산해서 dst의 대응 요소에 저장한다. 여러 채널이 개별적으로 처리된다. 행렬의 제곱근도 구할 수 있다. 즉, B*B = A 관계인 A의 제곱근 B를 구하는 것이다.

[cv::subtract()]
void cv::subtract(
	cv::InputArray	src1,
	cv::InputArray	src2,
	cv::OutputArray	dst,
	cv::InputArray	mask 	= cv::noArray(),	// 0이 아닌 위치만 연산
	int 			dtype 	= -1				// dst의 타입 지정
)

간단한 행렬 빼기 함수다. src1과 src2의 대응하는 요소에서 뺄셈한 결과를 dst의 대응 요소에 저장한다. (dst = src1 - src2, dst -= src1)

[cv::sum()]
cv::Scalar cv::sum(
	cv::InputArray arr
)

cv::sum() 함수는 arr의 각 채널에 있는 모든 픽셀을 합한다. 반환값은 cv::Scalar 타입이므로 cv::sum()이 다중 채널 배열을 수용할 수는 있지만 최대 4개 채널까지만 가능하다. 각 채널에 합산 결과는 cv::Scalar의 대응 요소에 저장된다.

[cv::trace()]
cv::Scalar cv::trace(
	cv::InputArray mat
)

행렬의 대각합(trace)은 대각선 요소를 합산한 것이다. cv::trace() 함수의 대각합은 cv::diag() 함수로 구현돼 있어서 전달한 배열이 정사각형일 필요는 없다. 다중 채널 배열을 지원하지만 대각합의 반환값은 cv::Scalar 타입이므로 최대 4개 채널이며, 각 채널의 대각합 결과는 cv::Scalar의 대응 요소에 저장된다.

[cv::transform()]
void cv::transform(
	cv::InputArray	src,
	cv::OutputArray	dst,
	cv::InputArray	mtx
)

cv::transform() 함수는 임의의 이미지 선형 변환을 계산할 때 사용한다. 다중 채널 입력 src를 채널 공간이라고 생각할 수 있는 벡터 모음으로 취급한다. 이 채널 공간에서 변환을 하기 위해 작은 행렬 mtx를 src의 각 요소 벡터에 곱한다. mtx의 열 수는 src 채널 수 또는 채널수 + 1과 같다. mtx의 열 수가 채널 수 +1을 가지는 경우, src의 채널 공간 벡터는 자동으로 값 1.0을 갖도록 요소를 하나 확장한다.
cv::transform() 변환은 사용하는 채널에 따라 의미가 다르다. 색상 채널로 사용하는 경우 선형 색상 공간 변환으로 생각할 수 있다. RGB와 YUV 색상 공간 변환이 이러한 변환의 예시다. x, y 또는 x, y, z 좌표를 나타내기 위해 채널을 사용하는 경우, 이러한 변환은 해당 점의 회전(또는 다른 기하학적 변환)으로 생각할 수 있다.

[cv::transpose()]
void cv::transpose(
	cv::InputArray	src,	// 입력 배열, n*m 2차원
	cv::OutputArray	dst 	// 결과 배열, m*n 2차원
)

cv::transpose() 함수는 src의 모든 요소의 행과 열 인덱스를 서로 치환해 dst의 대응 위치에 저장한다. 이 함수는 다중 채널 배열을 지원한다. 그러나 다중 채널을 사용해 복소수를 나타내는 경우에는 cv::transpose() 함수가 자동으로 복소수 켤레를 수행하지 않는다는 점을 주의해야 한다.
같은 결과를 cv::Mat::t() 멤버 함수로도 얻을 수 있다 → A = B + B.t();